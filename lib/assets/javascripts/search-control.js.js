// Generated by CoffeeScript 1.3.3

(function($) {
  var INPUT_SELECTOR, RESULTS_SELECTOR, buildQuery, focusInput, initResultsForQuery, performAsyncQuery, runQuery, searchEngines, setQueriesStatus, showResults, timestamp, visibleResults, whenInputChanged;
  INPUT_SELECTOR = '.search-control-input';
  RESULTS_SELECTOR = '.search-control-results';
  timestamp = function() {
    return new Date().getTime();
  };
  visibleResults = function(new_value) {
    var results;
    results = $(RESULTS_SELECTOR);
    if (new_value === true) {
      results.show();
    } else if (new_value === false) {
      results.hide();
    }
    return results.is(':visible');
  };
  focusInput = function() {
    return $(INPUT_SELECTOR).focus();
  };
  searchEngines = function() {
    return [
      {
        asyncQuery: function(query, callback) {
          return callback([
            {
              id: 1,
              priority: 0,
              render: function() {
                return query;
              }
            }
          ]);
        }
      }, {
        asyncQuery: function(query, callback) {
          return setTimeout((function() {
            return callback([
              {
                id: 2,
                priority: 0,
                render: function() {
                  return 'hw';
                }
              }
            ]);
          }), 1000);
        }
      }
    ];
  };
  setQueriesStatus = function(results) {
    if (results.data('queries') < 1) {
      return results.removeClass('loading');
    } else {
      return results.addClass('loading');
    }
  };
  showResults = function(resultsPane, results) {
    var allResults, oldIds, x, _i, _j, _k, _len, _len1, _len2, _results;
    resultsPane.data('queries', resultsPane.data('queries') - 1);
    setQueriesStatus(resultsPane);
    if (results === null) {
      return;
    }
    allResults = resultsPane.data('results');
    oldIds = {};
    for (_i = 0, _len = allResults.length; _i < _len; _i++) {
      x = allResults[_i];
      oldIds[x.id] = x;
    }
    for (_j = 0, _len1 = results.length; _j < _len1; _j++) {
      x = results[_j];
      if (!(x.id in oldIds)) {
        allResults.push(x);
      }
    }
    allResults.sort(function(a, b) {
      return a.priority - b.priority;
    });
    resultsPane.data('results', allResults);
    resultsPane.empty();
    _results = [];
    for (_k = 0, _len2 = allResults.length; _k < _len2; _k++) {
      x = allResults[_k];
      _results.push(resultsPane.append(x.render(x)));
    }
    return _results;
  };
  initResultsForQuery = function(results, queryId, enginesCount) {
    results.data('queryId', queryId);
    results.data('results', []);
    results.data('queries', enginesCount);
    return setQueriesStatus(results);
  };
  performAsyncQuery = function(query, results) {
    var engines, queryId;
    engines = searchEngines();
    queryId = 'query_' + timestamp();
    initResultsForQuery(results, queryId, engines.length);
    return $.each(engines, function(i, engine) {
      return engine.asyncQuery(query, function(result) {
        if (results.data('queryId') === queryId) {
          return showResults(results, result);
        }
      });
    });
  };
  runQuery = function(query) {
    var results;
    if (query.length === 0) {
      return visibleResults(false);
    } else {
      visibleResults(true);
      results = $(RESULTS_SELECTOR);
      return performAsyncQuery(query, results);
    }
  };
  buildQuery = function(value) {
    var x, _i, _len, _ref, _results;
    _ref = value.split(' ');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      if (x.length > 0) {
        _results.push(x);
      }
    }
    return _results;
  };
  whenInputChanged = function(value) {
    return runQuery(buildQuery(value));
  };
  return $.search_control = function(options) {
    $(document).on('input', INPUT_SELECTOR, function(event) {
      return whenInputChanged($(this).val());
    });
    whenInputChanged($(INPUT_SELECTOR).val());
    focusInput();
    return $(document).keydown(function(event) {
      if (event.keyCode === 27) {
        return focusInput();
      }
    });
  };
})(jQuery);
